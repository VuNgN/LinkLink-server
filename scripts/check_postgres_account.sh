#!/bin/bash

# Script ƒë·ªÉ ki·ªÉm tra v√† t·∫°o l·∫°i t√†i kho·∫£n Postgres
# S·ª≠ d·ª•ng: ./check_postgres_account.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ki·ªÉm tra container Postgres ƒëang ch·∫°y
check_postgres_container() {
    print_status "Ki·ªÉm tra container Postgres..."
    
    if docker ps | grep -q "postgres-image-upload-development"; then
        print_success "Container Postgres ƒëang ch·∫°y"
        return 0
    else
        print_warning "Container Postgres kh√¥ng ch·∫°y"
        return 1
    fi
}

# Ki·ªÉm tra th√¥ng tin t√†i kho·∫£n Postgres
check_postgres_account() {
    print_status "Ki·ªÉm tra th√¥ng tin t√†i kho·∫£n Postgres..."
    
    # L·∫•y th√¥ng tin t·ª´ container
    POSTGRES_USER=$(docker exec postgres-image-upload-development env | grep POSTGRES_USER | cut -d'=' -f2)
    POSTGRES_DB=$(docker exec postgres-image-upload-development env | grep POSTGRES_DB | cut -d'=' -f2)
    
    echo "PostgreSQL User: $POSTGRES_USER"
    echo "PostgreSQL Database: $POSTGRES_DB"
    
    # Th·ª≠ k·∫øt n·ªëi v·ªõi password m·∫∑c ƒë·ªãnh
    if docker exec postgres-image-upload-development psql -U postgres -d image_upload_development -c "SELECT 1;" > /dev/null 2>&1; then
        print_success "K·∫øt n·ªëi th√†nh c√¥ng v·ªõi password m·∫∑c ƒë·ªãnh"
        return 0
    else
        print_warning "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi password m·∫∑c ƒë·ªãnh"
        return 1
    fi
}

# T·∫°o l·∫°i t√†i kho·∫£n Postgres
reset_postgres_account() {
    print_warning "B·∫°n c√≥ mu·ªën t·∫°o l·∫°i t√†i kho·∫£n Postgres? (T·∫•t c·∫£ d·ªØ li·ªáu s·∫Ω b·ªã m·∫•t!)"
    read -p "Nh·∫≠p 'yes' ƒë·ªÉ ti·∫øp t·ª•c: " confirm
    
    if [ "$confirm" = "yes" ]; then
        print_status "D·ª´ng v√† x√≥a container c≈©..."
        docker-compose -f ../docker-compose.development.yml down -v
        
        print_status "T·∫°o l·∫°i container v·ªõi t√†i kho·∫£n m·ªõi..."
        docker-compose -f ../docker-compose.development.yml up -d
        
        print_status "Ch·ªù Postgres kh·ªüi ƒë·ªông..."
        sleep 10
        
        if check_postgres_account; then
            print_success "T√†i kho·∫£n Postgres ƒë√£ ƒë∆∞·ª£c t·∫°o l·∫°i th√†nh c√¥ng!"
            echo "Th√¥ng tin k·∫øt n·ªëi:"
            echo "  Host: localhost"
            echo "  Port: 5433"
            echo "  Database: image_upload_development"
            echo "  User: postgres"
            echo "  Password: password"
        else
            print_error "Kh√¥ng th·ªÉ t·∫°o l·∫°i t√†i kho·∫£n Postgres"
            exit 1
        fi
    else
        print_status "H·ªßy b·ªè vi·ªác t·∫°o l·∫°i t√†i kho·∫£n"
    fi
}

# ƒê·ªïi password Postgres
change_postgres_password() {
    print_status "ƒê·ªïi password Postgres..."
    
    read -p "Nh·∫≠p password m·ªõi: " new_password
    
    if docker exec postgres-image-upload-development psql -U postgres -d image_upload_development -c "ALTER USER postgres WITH PASSWORD '$new_password';" > /dev/null 2>&1; then
        print_success "Password ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh c√¥ng!"
        echo "Password m·ªõi: $new_password"
    else
        print_error "Kh√¥ng th·ªÉ ƒë·ªïi password"
        exit 1
    fi
}

# Menu ch√≠nh
show_menu() {
    echo ""
    echo "üêò PostgreSQL Account Management"
    echo "================================"
    echo "1. Ki·ªÉm tra container Postgres"
    echo "2. Ki·ªÉm tra t√†i kho·∫£n Postgres"
    echo "3. T·∫°o l·∫°i t√†i kho·∫£n (m·∫•t d·ªØ li·ªáu)"
    echo "4. ƒê·ªïi password"
    echo "5. Tho√°t"
    echo ""
    read -p "Ch·ªçn t√πy ch·ªçn (1-5): " choice
    
    case $choice in
        1)
            check_postgres_container
            ;;
        2)
            if check_postgres_container; then
                check_postgres_account
            fi
            ;;
        3)
            if check_postgres_container; then
                reset_postgres_account
            fi
            ;;
        4)
            if check_postgres_container; then
                change_postgres_password
            fi
            ;;
        5)
            print_status "Tho√°t..."
            exit 0
            ;;
        *)
            print_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
            ;;
    esac
}

# Ch·∫°y menu
show_menu 