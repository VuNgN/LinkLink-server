name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend:
    name: Backend (FastAPI)
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    defaults:
      run:
        working-directory: ./
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov bandit safety

      - name: Lint backend (flake8)
        run: |
          pip install flake8
          flake8 app main.py

      - name: Security scan backend (bandit)
        run: |
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Security scan backend (safety)
        run: |
          safety check --json --output safety-report.json || true

      - name: Security scan backend (trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: app

      - name: Setup database
        run: |
          python database/setup_all_environments.py
        env:
          DATABASE_URL: postgresql+asyncpg://${{ secrets.PGUSER }}:${{ secrets.PGPASSWORD }}@localhost:5432/${{ secrets.PGDATABASE }}
          ADMIN_USERNAME: admin
          ADMIN_EMAIL: admin@example.com
          ADMIN_PASSWORD: admin123

      - name: Run backend tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql+asyncpg://${{ secrets.PGUSER }}:${{ secrets.PGPASSWORD }}@localhost:5432/${{ secrets.PGDATABASE }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  frontend:
    name: Frontend (Vite)
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Lint frontend (ESLint)
        run: npm run lint

      - name: Security scan frontend (npm audit)
        run: npm audit --audit-level=moderate

      - name: Build frontend
        run: npm run build

      - name: Security scan frontend (trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: frontend

      - name: Run frontend tests
        run: |
          # Skip frontend tests for now as they're not fully implemented
          echo "Frontend tests skipped - not yet implemented"
          # npm install --save-dev jest @testing-library/react @testing-library/jest-dom
          # npm test -- --coverage --watchAll=false

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.PGUSER }}
          POSTGRES_PASSWORD: ${{ secrets.PGPASSWORD }}
          POSTGRES_DB: ${{ secrets.PGDATABASE }}
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-asyncio httpx

      - name: Setup database for integration tests
        run: |
          python database/setup_all_environments.py
        env:
          DATABASE_URL: postgresql+asyncpg://${{ secrets.PGUSER }}:${{ secrets.PGPASSWORD }}@localhost:5432/${{ secrets.PGDATABASE }}
          ADMIN_USERNAME: admin
          ADMIN_EMAIL: admin@example.com
          ADMIN_PASSWORD: admin123

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v
        env:
          DATABASE_URL: postgresql+asyncpg://${{ secrets.PGUSER }}:${{ secrets.PGPASSWORD }}@localhost:5432/${{ secrets.PGDATABASE }}

  deploy:
    name: Deploy to ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
    runs-on: ubuntu-latest
    needs: [backend, frontend, integration]
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - uses: actions/checkout@v3
      

      
      - name: Test SSH connection
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          timeout: 30s
          command_timeout: 60s
          script: |
            echo "SSH connection test successful"
            echo "Host: $(hostname)"
            echo "User: $(whoami)"
            echo "Date: $(date)"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          timeout: 60s
          command_timeout: 300s
          use_insecure_cipher: false
          debug: true
          script: |
            # Debug connection
            echo "Testing SSH connection..."
            whoami
            pwd
            echo "Docker status:"
            docker --version
            docker ps -a || echo "Docker not running"
            echo "Disk space:"
            df -h
            echo "Memory usage:"
            free -h
            
            # Set environment variables based on branch
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              PROJECT_DIR="~/Workspace/linklink"
              COMPOSE_FILE="docker-compose.prod.yml"
              IMAGE_TAG="latest"
              HEALTH_PORT="8000"
              echo "Deploying to PRODUCTION environment"
            else
              PROJECT_DIR="~/Workspace/linklink-dev"
              COMPOSE_FILE="docker-compose.development.yml"
              IMAGE_TAG="development"
              HEALTH_PORT="8001"
              echo "Deploying to DEVELOPMENT environment"
            fi
            
            # Create necessary directories
            mkdir -p $PROJECT_DIR/docker/postgres/${IMAGE_TAG}_data
            mkdir -p $PROJECT_DIR/uploads
            mkdir -p $PROJECT_DIR/nginx/ssl
            
            # Navigate to project directory
            cd $PROJECT_DIR
            
            # Build image locally
            echo "Building image locally..."
            cd $PROJECT_DIR
            docker build -t linklink-app:$IMAGE_TAG .
            
            # Create .env file
            cat > .env << 'EOF'
            POSTGRES_DB=${{ secrets.PGDATABASE }}
            POSTGRES_USER=${{ secrets.PGUSER }}
            POSTGRES_PASSWORD=${{ secrets.PGPASSWORD }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            EOF
            
            # Stop old containers
            docker-compose -f $COMPOSE_FILE down
            
            # Start new containers
            docker-compose -f $COMPOSE_FILE up -d
            
            # Health check
            sleep 15
            curl -f http://localhost:$HEALTH_PORT/health || exit 1
            
            echo "Deployment completed successfully!"

 